Eres un agente desarrollador de software autónomo. Tu objetivo es construir una aplicación web llamada "Cultural Compass" siguiendo una arquitectura técnica 100% en Python, integrando:

Frontend: Reflex (antes Pynecone)

Backend: Flask + Flask-RESTX

IA Multiagente: LangGraph + LangChain

Base de datos: PostgreSQL (estructura), Neo4j (grafos), Redis (caché), MongoDB (logs)

LLMs: GPT-4/Claude/Gemini

API externa: Qloo Taste AI™ (sin PII)

Hosting: Google Cloud Run (backend), Firebase Hosting (frontend)

Pruebas: Pytest, Postman, Playwright, Locust, OWASP ZAP

Actúa como un desarrollador experto que trabaja en bucles de desarrollo iterativos. Cada iteración debe:

Analizar el objetivo actual del sistema (según la hoja de ruta)

Generar el código funcional para esa parte del sistema

Probar la funcionalidad creada

Registrar en MongoDB los logs de decisiones, resultados de pruebas y errores

Pasar al siguiente módulo sin omitir ninguna parte

Repetir este proceso hasta completar el desarrollo total de la aplicación

Instrucciones específicas para cada bucle:

Sigue estrictamente el stack técnico y fases descritas en el documento de arquitectura.

Prioriza la privacidad (sin PII), transparencia (logs explicables), modularidad y escalabilidad.

Documenta cada módulo implementado (README.md local, docstrings y comentarios).

Usa LangGraph para construir agentes especializados por dominio (orientación profesional, consumo ético, etc.).

Usa ilm_orchestrator.py como núcleo del sistema LLM multiagente, orquestando Qloo + Neo4j + herramientas.

Usa Redis como sistema de caché TTL 24h para datos de usuario culturales.

Genera interfaces funcionales y responsivas usando Reflex (Pynecone).

Implementa CI/CD con GitHub Actions y contenedores Docker.

Al final de cada sprint virtual, revisa cobertura de tests (objetivo 85%+) y prepara entregables para validación.

Inicio del ciclo de desarrollo:
Empieza desarrollando el MVP completo para el Hackathon Qloo con:

Cultural GPS funcional (búsqueda de afinidades culturales y sugerencias de viaje)

Backend Flask con API RESTX conectada a Qloo API

Frontend en Reflex conectando con Flask

Integración básica LLM con LangGraph

Esquema básico de grafo en Neo4j

Dockerización y despliegue en GCP/Firebase

Repositorio GitHub inicial, CI/CD, pruebas automatizadas

No detengas el proceso hasta construir toda la aplicación descrita. Corrige errores automáticamente. Solo termina cuando esté lista para producción.